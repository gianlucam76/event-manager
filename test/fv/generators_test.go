/*
Copyright 2024. projectsveltos.io. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package fv_test

import (
	"context"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"

	configv1beta1 "github.com/projectsveltos/addon-controller/api/v1beta1"
	"github.com/projectsveltos/event-manager/api/v1beta1"
	libsveltosv1beta1 "github.com/projectsveltos/libsveltos/api/v1beta1"
	"github.com/projectsveltos/libsveltos/lib/k8s_utils"
)

var (
	// EventTrigger will reference this ConfigMap in the ConfigMapGenerator
	// section. It will create a new ConfigMap with the content of the event (token)
	// Name of the generator configMap will be defined by the generator `InstantiatedResourceNameFormat`
	// field.
	// EventTrigger is also configured to set ClusterProfile.Spec.ReferencedResourceRefs instructing
	// ClusterProfile to then fetch this resource.
	// The ClusterProfile generated in response to the event will finally collect this resource
	// and use it to deploy the content of toDeployConfigMap ConfigMap
	//nolint: gosec // just a test
	tokenConfigMap = `kind: ConfigMap
apiVersion: v1
metadata:
  name: token
  namespace: default
  annotations:
    projectsveltos.io/instantiate: "ok"
data:
  token: "{{ .Resource.data.token }}"`

	// ClusterProfile generated by event-manager in response to event, will reference this
	// in its PolicyRefs section
	// This ConfigMap has the annotation `projectsveltos.io/template: ok` cause addon-controller
	// will have to instantiate it (see data content)
	toDeployConfigMap = `apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    projectsveltos.io/template: ok
  name: deploy-token
  namespace: default
data:
  configmap: |-
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: "{{ .Cluster.metadata.name }}"
      namespace: "{{ .Cluster.metadata.namespace }}"
    data:
      token: "{{ ((getResource "ConfigMapToken")).data.token }}"`
)

var _ = Describe("Generators", func() {
	const (
		namePrefix     = "generators-"
		projectsveltos = "projectsveltos"
	)

	It("Configures Generators and have ClusterProfile consume those", Label("FV"), func() {
		secretNamespace := randomString()

		Byf("Create a EventSource matching Secrets in namespace: %s", secretNamespace)
		eventSource := libsveltosv1beta1.EventSource{
			ObjectMeta: metav1.ObjectMeta{
				Name: randomString(),
				Annotations: map[string]string{
					randomString(): randomString(),
				},
			},
			Spec: libsveltosv1beta1.EventSourceSpec{
				ResourceSelectors: []libsveltosv1beta1.ResourceSelector{
					{
						Group:     "",
						Version:   "v1",
						Kind:      "Secret",
						Namespace: secretNamespace,
					},
				},
				CollectResources: true,
			},
		}
		Expect(k8sClient.Create(context.TODO(), &eventSource)).To(Succeed())

		u, err := k8s_utils.GetUnstructured([]byte(toDeployConfigMap))
		Expect(err).To(BeNil())

		Byf("Creating a ConfigMap %s/%s to be referenced in PolicyRefs section", u.GetNamespace(), u.GetName())
		err = k8sClient.Create(context.TODO(), u)
		if err != nil {
			Expect(apierrors.IsAlreadyExists(err)).To(BeTrue())
		}

		policyRef := configv1beta1.PolicyRef{
			Kind:      string(libsveltosv1beta1.ConfigMapReferencedResourceKind),
			Namespace: u.GetNamespace(),
			Name:      u.GetName(),
		}

		Byf("Create a EventTrigger referencing EventSource %s", eventSource.Name)
		eventTrigger := getEventTrigger(namePrefix, eventSource.Name,
			map[string]string{key: value}, []configv1beta1.PolicyRef{policyRef})
		eventTrigger.Spec.OneForEvent = true

		u, err = k8s_utils.GetUnstructured([]byte(tokenConfigMap))
		Expect(err).To(BeNil())
		err = k8sClient.Create(context.TODO(), u)
		if err != nil {
			Expect(apierrors.IsAlreadyExists(err)).To(BeTrue())
		}

		Byf("EventTrigger uses ConfigMapGenerator")
		instantiateResourceName := "{{ .Cluster.metadata.namespace }}-{{ .Cluster.metadata.name}}-token"
		eventTrigger.Spec.ConfigMapGenerator = []v1beta1.GeneratorReference{
			{
				Namespace:                      u.GetNamespace(),
				Name:                           u.GetName(),
				InstantiatedResourceNameFormat: instantiateResourceName,
			},
		}

		Byf("EventTrigger sets TemplateResourceRefs to reference the resource created via ConfigMapGenerator")
		eventTrigger.Spec.TemplateResourceRefs = []configv1beta1.TemplateResourceRef{
			{
				Identifier: "ConfigMapToken",
				Resource: corev1.ObjectReference{
					Namespace:  "projectsveltos",
					Name:       instantiateResourceName,
					Kind:       string(libsveltosv1beta1.ConfigMapReferencedResourceKind),
					APIVersion: "v1",
				},
			},
		}

		Expect(k8sClient.Create(context.TODO(), eventTrigger)).To(Succeed())

		Byf("Getting client to access the workload cluster")
		workloadClient, err := getKindWorkloadClusterKubeconfig()
		Expect(err).To(BeNil())
		Expect(workloadClient).ToNot(BeNil())

		if isAgentLessMode() {
			Byf("Verifying EventSource %s is NOT present in the managed cluster", eventSource.Name)
			Consistently(func() bool {
				currentEventSource := &libsveltosv1beta1.EventSource{}
				err = workloadClient.Get(context.TODO(), types.NamespacedName{Name: eventSource.Name},
					currentEventSource)
				return err != nil && meta.IsNoMatchError(err) // CRD never installed
			}, timeout/2, pollingInterval).Should(BeTrue())
		} else {
			Byf("Verifying EventSource %s is present in the managed cluster", eventSource.Name)
			Eventually(func() error {
				currentEventSource := &libsveltosv1beta1.EventSource{}
				return workloadClient.Get(context.TODO(), types.NamespacedName{Name: eventSource.Name},
					currentEventSource)
			}, timeout, pollingInterval).Should(BeNil())

			Byf("Verifying EventReports %s is present in the managed cluster", eventSource.Name)
			Eventually(func() error {
				currentEventReport := &libsveltosv1beta1.EventReport{}
				return workloadClient.Get(context.TODO(),
					types.NamespacedName{Namespace: projectsveltos, Name: eventSource.Name},
					currentEventReport)
			}, timeout, pollingInterval).Should(BeNil())
		}

		Byf("Verifying EventReports %s is present in the management cluster", eventSource.Name)
		Eventually(func() error {
			currentEventReport := &libsveltosv1beta1.EventReport{}
			return k8sClient.Get(context.TODO(),
				types.NamespacedName{Namespace: kindWorkloadCluster.Namespace, Name: getEventReportName(eventSource.Name)},
				currentEventReport)
		}, timeout, pollingInterval).Should(BeNil())

		createNamespaceAndSecret(workloadClient, secretNamespace)

		if !isAgentLessMode() {
			Byf("Verifying EventReports %s is present in the managed cluster with matching resource", eventSource.Name)
			Eventually(func() bool {
				currentEventReport := &libsveltosv1beta1.EventReport{}
				err = workloadClient.Get(context.TODO(),
					types.NamespacedName{Namespace: projectsveltos, Name: eventSource.Name},
					currentEventReport)
				if err != nil {
					return false
				}
				return len(currentEventReport.Spec.Resources) != 0
			}, timeout, pollingInterval).Should(BeTrue())
		}

		Byf("Verifying EventReports %s is present in the management cluster with matching resource", getEventReportName(eventSource.Name))
		Eventually(func() bool {
			currentEventReport := &libsveltosv1beta1.EventReport{}
			err = k8sClient.Get(context.TODO(),
				types.NamespacedName{Namespace: kindWorkloadCluster.Namespace, Name: getEventReportName(eventSource.Name)},
				currentEventReport)
			if err != nil {
				return false
			}

			return len(currentEventReport.Spec.Resources) != 0
		}, timeout, pollingInterval).Should(BeTrue())

		By("Verifying ClusterProfile has been created")
		Eventually(func() bool {
			listOptions := []client.ListOption{
				client.MatchingLabels(getInstantiatedObjectLabels(eventTrigger.Name)),
			}
			clusterProfileList := &configv1beta1.ClusterProfileList{}
			err = k8sClient.List(context.TODO(), clusterProfileList, listOptions...)
			if err != nil {
				return false
			}
			return len(clusterProfileList.Items) == 1
		}, timeout, pollingInterval).Should(BeTrue())

		listOptions := []client.ListOption{
			client.MatchingLabels(getInstantiatedObjectLabels(eventTrigger.Name)),
		}
		clusterProfileList := &configv1beta1.ClusterProfileList{}
		Expect(k8sClient.List(context.TODO(), clusterProfileList, listOptions...)).To(Succeed())
		clusterProfile := &clusterProfileList.Items[0]
		clusterSummary := verifyClusterSummary(clusterProfile, kindWorkloadCluster.Namespace, kindWorkloadCluster.Name)

		Byf("Verifying ClusterSummary %s status is set to Deployed for Resources feature", clusterSummary.Name)
		verifyFeatureStatusIsProvisioned(kindWorkloadCluster.Namespace, clusterSummary.Name, configv1beta1.FeatureResources)

		Byf("Verifying ConfigMap is created in the namespace %s", kindWorkloadCluster.Namespace)
		deployedConfigMap := &corev1.ConfigMap{}
		Expect(workloadClient.Get(context.TODO(),
			types.NamespacedName{Namespace: kindWorkloadCluster.Namespace, Name: kindWorkloadCluster.Name},
			deployedConfigMap)).To(Succeed())
		Expect(deployedConfigMap.Data).ToNot(BeNil())
		_, ok := deployedConfigMap.Data["token"]
		Expect(ok).To(BeTrue())

		Byf("Deleting EventTrigger %s", eventTrigger.Name)
		currentEventTrigger := &v1beta1.EventTrigger{}
		Expect(k8sClient.Get(context.TODO(), types.NamespacedName{Name: eventTrigger.Name},
			currentEventTrigger)).To(Succeed())
		Expect(k8sClient.Delete(context.TODO(), currentEventTrigger)).To(Succeed())

		if !isAgentLessMode() {
			Byf("Verifying EventSource %s is removed from the managed cluster", eventSource.Name)
			Eventually(func() bool {
				currentEventSource := &libsveltosv1beta1.EventSource{}
				err = workloadClient.Get(context.TODO(), types.NamespacedName{Name: eventSource.Name},
					currentEventSource)
				return err != nil && apierrors.IsNotFound(err)
			}, timeout, pollingInterval).Should(BeTrue())

			Byf("Verifying EventReports %s is removed from the managed cluster", eventSource.Name)
			Eventually(func() bool {
				currentEventReport := &libsveltosv1beta1.EventReport{}
				err = workloadClient.Get(context.TODO(),
					types.NamespacedName{Namespace: projectsveltos, Name: eventSource.Name},
					currentEventReport)
				return err != nil && apierrors.IsNotFound(err)
			}, timeout, pollingInterval).Should(BeTrue())
		}

		Byf("Verifying EventTrigger %s is removed from the management cluster", eventTrigger.Name)
		Eventually(func() bool {
			err = k8sClient.Get(context.TODO(), types.NamespacedName{Name: eventTrigger.Name},
				currentEventTrigger)
			return err != nil && apierrors.IsNotFound(err)
		}, timeout, pollingInterval).Should(BeTrue())

		Byf("Deleting EventSource %s in the managed cluster", eventSource.Name)
		currentEventSource := &libsveltosv1beta1.EventSource{}
		Expect(k8sClient.Get(context.TODO(), types.NamespacedName{Name: eventSource.Name},
			currentEventSource)).To(Succeed())
		Expect(k8sClient.Delete(context.TODO(), currentEventSource)).To(Succeed())

		Byf("Verifying EventReports %s is removed from the management cluster", getEventReportName(eventSource.Name))
		Eventually(func() bool {
			currentEventReport := &libsveltosv1beta1.EventReport{}
			err = k8sClient.Get(context.TODO(),
				types.NamespacedName{Namespace: kindWorkloadCluster.Namespace, Name: getEventReportName(eventSource.Name)},
				currentEventReport)
			return err != nil && apierrors.IsNotFound(err)
		}, timeout, pollingInterval).Should(BeTrue())

		By("Verifying ClusterProfile has been removed")
		Eventually(func() bool {
			listOptions = []client.ListOption{
				client.MatchingLabels(getInstantiatedObjectLabels(eventTrigger.Name)),
			}
			err = k8sClient.List(context.TODO(), clusterProfileList, listOptions...)
			if err != nil {
				return false
			}
			for i := range clusterProfileList.Items {
				cp := clusterProfileList.Items[i]
				if cp.DeletionTimestamp.IsZero() {
					return false
				}
			}
			return true
		}, timeout, pollingInterval).Should(BeTrue())

		deleteConfigMap(tokenConfigMap)
		deleteConfigMap(toDeployConfigMap)
	})
})

func createNamespaceAndSecret(c client.Client, secretNamespace string) {
	Byf("Create namespace %s in the managed cluster", secretNamespace)
	ns := &corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: secretNamespace,
		},
	}
	Expect(c.Create(context.TODO(), ns)).To(Succeed())

	serviceAccountName := randomString()
	Byf("Create serviceAccount %s/%s in the managed cluster", secretNamespace, serviceAccountName)
	sa := &corev1.ServiceAccount{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: secretNamespace,
			Name:      serviceAccountName,
		},
	}
	Expect(c.Create(context.TODO(), sa)).To(Succeed())

	secretName := randomString()
	Byf("Creating a Secret in namespace %s/%s in the managed cluster", secretNamespace, secretName)
	service := &corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: secretNamespace, // EventSource filters service in this namespace
			Name:      secretName,
			Annotations: map[string]string{
				"kubernetes.io/service-account.name": serviceAccountName,
			},
		},
		Type: corev1.SecretTypeServiceAccountToken,
	}
	Expect(c.Create(context.TODO(), service)).To(Succeed())
}

func deleteConfigMap(cm string) {
	u, err := k8s_utils.GetUnstructured([]byte(cm))
	Expect(err).To(BeNil())

	currentConfigMap := &corev1.ConfigMap{}
	Expect(k8sClient.Get(context.TODO(),
		types.NamespacedName{Namespace: u.GetNamespace(), Name: u.GetName()},
		currentConfigMap)).To(Succeed())

	Expect(k8sClient.Delete(context.TODO(), u))
}
