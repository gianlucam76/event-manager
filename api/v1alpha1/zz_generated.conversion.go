//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1 "k8s.io/api/core/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"

	apiv1alpha1 "github.com/projectsveltos/addon-controller/api/v1alpha1"
	apiv1beta1 "github.com/projectsveltos/addon-controller/api/v1beta1"
	v1beta1 "github.com/projectsveltos/event-manager/api/v1beta1"
	libsveltosapiv1alpha1 "github.com/projectsveltos/libsveltos/api/v1alpha1"
	libsveltosapiv1beta1 "github.com/projectsveltos/libsveltos/api/v1beta1"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*EventTrigger)(nil), (*v1beta1.EventTrigger)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger(a.(*EventTrigger), b.(*v1beta1.EventTrigger), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.EventTrigger)(nil), (*EventTrigger)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger(a.(*v1beta1.EventTrigger), b.(*EventTrigger), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*EventTriggerList)(nil), (*v1beta1.EventTriggerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EventTriggerList_To_v1beta1_EventTriggerList(a.(*EventTriggerList), b.(*v1beta1.EventTriggerList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.EventTriggerList)(nil), (*EventTriggerList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_EventTriggerList_To_v1alpha1_EventTriggerList(a.(*v1beta1.EventTriggerList), b.(*EventTriggerList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*EventTriggerStatus)(nil), (*v1beta1.EventTriggerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus(a.(*EventTriggerStatus), b.(*v1beta1.EventTriggerStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1beta1.EventTriggerStatus)(nil), (*EventTriggerStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus(a.(*v1beta1.EventTriggerStatus), b.(*EventTriggerStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*EventTriggerSpec)(nil), (*v1beta1.EventTriggerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EventTriggerSpec_To_v1beta1_EventTriggerSpec(a.(*EventTriggerSpec), b.(*v1beta1.EventTriggerSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1beta1.EventTriggerSpec)(nil), (*EventTriggerSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta1_EventTriggerSpec_To_v1alpha1_EventTriggerSpec(a.(*v1beta1.EventTriggerSpec), b.(*EventTriggerSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger(in *EventTrigger, out *v1beta1.EventTrigger, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_EventTriggerSpec_To_v1beta1_EventTriggerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger is an autogenerated conversion function.
func Convert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger(in *EventTrigger, out *v1beta1.EventTrigger, s conversion.Scope) error {
	return autoConvert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger(in, out, s)
}

func autoConvert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger(in *v1beta1.EventTrigger, out *EventTrigger, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1beta1_EventTriggerSpec_To_v1alpha1_EventTriggerSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger is an autogenerated conversion function.
func Convert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger(in *v1beta1.EventTrigger, out *EventTrigger, s conversion.Scope) error {
	return autoConvert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger(in, out, s)
}

func autoConvert_v1alpha1_EventTriggerList_To_v1beta1_EventTriggerList(in *EventTriggerList, out *v1beta1.EventTriggerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1beta1.EventTrigger, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_EventTrigger_To_v1beta1_EventTrigger(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_EventTriggerList_To_v1beta1_EventTriggerList is an autogenerated conversion function.
func Convert_v1alpha1_EventTriggerList_To_v1beta1_EventTriggerList(in *EventTriggerList, out *v1beta1.EventTriggerList, s conversion.Scope) error {
	return autoConvert_v1alpha1_EventTriggerList_To_v1beta1_EventTriggerList(in, out, s)
}

func autoConvert_v1beta1_EventTriggerList_To_v1alpha1_EventTriggerList(in *v1beta1.EventTriggerList, out *EventTriggerList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EventTrigger, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_EventTrigger_To_v1alpha1_EventTrigger(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1beta1_EventTriggerList_To_v1alpha1_EventTriggerList is an autogenerated conversion function.
func Convert_v1beta1_EventTriggerList_To_v1alpha1_EventTriggerList(in *v1beta1.EventTriggerList, out *EventTriggerList, s conversion.Scope) error {
	return autoConvert_v1beta1_EventTriggerList_To_v1alpha1_EventTriggerList(in, out, s)
}

func autoConvert_v1alpha1_EventTriggerSpec_To_v1beta1_EventTriggerSpec(in *EventTriggerSpec, out *v1beta1.EventTriggerSpec, s conversion.Scope) error {
	// WARNING: in.SourceClusterSelector requires manual conversion: inconvertible types (github.com/projectsveltos/libsveltos/api/v1alpha1.Selector vs github.com/projectsveltos/libsveltos/api/v1beta1.Selector)
	out.ClusterSetRefs = *(*[]string)(unsafe.Pointer(&in.ClusterSetRefs))
	out.OneForEvent = in.OneForEvent
	out.EventSourceName = in.EventSourceName
	// WARNING: in.DestinationClusterSelector requires manual conversion: inconvertible types (*github.com/projectsveltos/libsveltos/api/v1alpha1.Selector vs github.com/projectsveltos/libsveltos/api/v1beta1.Selector)
	out.SyncMode = apiv1beta1.SyncMode(in.SyncMode)
	out.Tier = in.Tier
	out.ContinueOnConflict = in.ContinueOnConflict
	out.MaxUpdate = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUpdate))
	out.StopMatchingBehavior = apiv1beta1.StopMatchingBehavior(in.StopMatchingBehavior)
	out.Reloader = in.Reloader
	out.TemplateResourceRefs = *(*[]apiv1beta1.TemplateResourceRef)(unsafe.Pointer(&in.TemplateResourceRefs))
	out.PolicyRefs = *(*[]apiv1beta1.PolicyRef)(unsafe.Pointer(&in.PolicyRefs))
	out.HelmCharts = *(*[]apiv1beta1.HelmChart)(unsafe.Pointer(&in.HelmCharts))
	out.KustomizationRefs = *(*[]apiv1beta1.KustomizationRef)(unsafe.Pointer(&in.KustomizationRefs))
	out.ValidateHealths = *(*[]apiv1beta1.ValidateHealth)(unsafe.Pointer(&in.ValidateHealths))
	out.ExtraLabels = *(*map[string]string)(unsafe.Pointer(&in.ExtraLabels))
	out.ExtraAnnotations = *(*map[string]string)(unsafe.Pointer(&in.ExtraAnnotations))
	return nil
}

func autoConvert_v1beta1_EventTriggerSpec_To_v1alpha1_EventTriggerSpec(in *v1beta1.EventTriggerSpec, out *EventTriggerSpec, s conversion.Scope) error {
	// WARNING: in.SourceClusterSelector requires manual conversion: inconvertible types (github.com/projectsveltos/libsveltos/api/v1beta1.Selector vs github.com/projectsveltos/libsveltos/api/v1alpha1.Selector)
	out.ClusterSetRefs = *(*[]string)(unsafe.Pointer(&in.ClusterSetRefs))
	out.OneForEvent = in.OneForEvent
	out.EventSourceName = in.EventSourceName
	// WARNING: in.DestinationClusterSelector requires manual conversion: inconvertible types (github.com/projectsveltos/libsveltos/api/v1beta1.Selector vs *github.com/projectsveltos/libsveltos/api/v1alpha1.Selector)
	out.SyncMode = apiv1alpha1.SyncMode(in.SyncMode)
	out.Tier = in.Tier
	out.ContinueOnConflict = in.ContinueOnConflict
	out.MaxUpdate = (*intstr.IntOrString)(unsafe.Pointer(in.MaxUpdate))
	out.StopMatchingBehavior = apiv1alpha1.StopMatchingBehavior(in.StopMatchingBehavior)
	out.Reloader = in.Reloader
	out.TemplateResourceRefs = *(*[]apiv1alpha1.TemplateResourceRef)(unsafe.Pointer(&in.TemplateResourceRefs))
	out.PolicyRefs = *(*[]apiv1alpha1.PolicyRef)(unsafe.Pointer(&in.PolicyRefs))
	out.HelmCharts = *(*[]apiv1alpha1.HelmChart)(unsafe.Pointer(&in.HelmCharts))
	out.KustomizationRefs = *(*[]apiv1alpha1.KustomizationRef)(unsafe.Pointer(&in.KustomizationRefs))
	out.ValidateHealths = *(*[]apiv1alpha1.ValidateHealth)(unsafe.Pointer(&in.ValidateHealths))
	// WARNING: in.Patches requires manual conversion: does not exist in peer-type
	out.ExtraLabels = *(*map[string]string)(unsafe.Pointer(&in.ExtraLabels))
	out.ExtraAnnotations = *(*map[string]string)(unsafe.Pointer(&in.ExtraAnnotations))
	return nil
}

func autoConvert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus(in *EventTriggerStatus, out *v1beta1.EventTriggerStatus, s conversion.Scope) error {
	out.MatchingClusterRefs = *(*[]v1.ObjectReference)(unsafe.Pointer(&in.MatchingClusterRefs))
	out.DestinationMatchingClusterRefs = *(*[]v1.ObjectReference)(unsafe.Pointer(&in.DestinationMatchingClusterRefs))
	out.ClusterInfo = *(*[]libsveltosapiv1beta1.ClusterInfo)(unsafe.Pointer(&in.ClusterInfo))
	return nil
}

// Convert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus is an autogenerated conversion function.
func Convert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus(in *EventTriggerStatus, out *v1beta1.EventTriggerStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_EventTriggerStatus_To_v1beta1_EventTriggerStatus(in, out, s)
}

func autoConvert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus(in *v1beta1.EventTriggerStatus, out *EventTriggerStatus, s conversion.Scope) error {
	out.MatchingClusterRefs = *(*[]v1.ObjectReference)(unsafe.Pointer(&in.MatchingClusterRefs))
	out.DestinationMatchingClusterRefs = *(*[]v1.ObjectReference)(unsafe.Pointer(&in.DestinationMatchingClusterRefs))
	out.ClusterInfo = *(*[]libsveltosapiv1alpha1.ClusterInfo)(unsafe.Pointer(&in.ClusterInfo))
	return nil
}

// Convert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus is an autogenerated conversion function.
func Convert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus(in *v1beta1.EventTriggerStatus, out *EventTriggerStatus, s conversion.Scope) error {
	return autoConvert_v1beta1_EventTriggerStatus_To_v1alpha1_EventTriggerStatus(in, out, s)
}
